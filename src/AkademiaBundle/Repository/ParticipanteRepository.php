<?php

namespace AkademiaBundle\Repository;

/**
 * ParticipanteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipanteRepository extends \Doctrine\ORM\EntityRepository
{

	public function getbuscarParticipante($dni){

        $query = "SELECT id from ACADEMIA.participante where dni='$dni'";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $dni = $stmt->fetchAll();

    	return $dni;
	}

    public function getbuscarParticipantePersona($dni){

        $query ="SELECT percodigo as id from grpersona where perdni='$dni'";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $dni = $stmt->fetchAll();

        return $dni;
    }

    public function getbuscarParticipanteApoderado($dni){

        $query = "SELECT top 1 id,apoderado_id from ACADEMIA.participante where dni='$dni' and estado=0 order by id DESC";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $dni = $stmt->fetchAll();

        return $dni;
    }


    public function maxDniAcademiaPart($dni){

        $query = "SELECT MAX(id) as id from academia.participante where dni = '$dni' group by(dni)";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $codigo = $stmt->fetchAll();

        return $codigo;
    }

    public function getActualizarApoderado($idApod, $idParticipante){
        $query = "UPDATE ACADEMIA.participante SET apoderado_id ='$idApod'  WHERE id='$idParticipante'; ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
    }

    
    public function getActualizarParticipanteFicha($idParticipante, $ficha){
        $query = "UPDATE ACADEMIA.inscribete SET participante_id ='$idParticipante'  WHERE id='$ficha'; ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
    }

    public function getMostrarSeleccionados(){
        
        $query = "SELECT 
                (per.perapepaterno+' '+per.perapematerno+' '+per.pernombres) as nombre,
                par.id as idParticipante,
                per.perdni as dni, 
                (cast(datediff(dd,per.perfecnacimiento,GETDATE()) / 365.25 as int)) as edad,
                per.persexo as sexo,
                ins.id as idInscribete,
                mov.categoria_id as idCategoria,
                mov.asistencia_id as idAsistencia,
                mov.fecha_modificacion as fechita,
                dis.dis_descripcion as nombreDisciplina,
                ede.ede_nombre as nombreComplejo
                FROM 
                ACADEMIA.inscribete ins 
                inner join (SELECT m.inscribete_id as mov_ins_id, MAX(m.id) mov_id
                FROM ACADEMIA.movimientos m
                GROUP BY m.inscribete_id) ids ON ins.id = ids.mov_ins_id
                inner join academia.horario hor on ins.horario_id = hor.id
                inner join catastro.edificacionDisciplina edi on edi.edi_codigo = hor.edi_codigo
                inner join catastro.disciplina dis on dis.dis_codigo = edi.dis_codigo
                inner join catastro.edificacionesdeportivas ede on ede.ede_codigo = edi.ede_codigo 
                inner join academia.participante par on ins.participante_id = par.id
                inner join grpersona per on per.percodigo = par.percodigo
                inner join academia.movimientos mov on mov.id = ids.mov_id
                WHERE 
                ins.estado = 2 and 
                mov.categoria_id = 2 and 
                mov.asistencia_id = 2";
                
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $seleccionado = $stmt->fetchAll();

        return $seleccionado;

    }

    public function getMostrarTalento($idParticipante){

         $query = " SELECT 
                (per.perapepaterno+' '+per.perapematerno+' '+per.pernombres) as nombre,
                par.id as idParticipante,
                par.dni as dni, 
                par.link as link,
                par.ficha as foto,
                par.comentarios as comentarios,
                (cast(datediff(dd,per.perfecnacimiento,GETDATE()) / 365.25 as int)) as edad,
                per.persexo as sexo,
                dis.dis_descripcion as nombreDisciplina,
                ede.ede_nombre as nombreComplejo
                FROM 
                ACADEMIA.inscribete ins 
                inner join academia.horario hor on ins.horario_id = hor.id
                inner join catastro.edificacionDisciplina edi on edi.edi_codigo = hor.edi_codigo
                inner join catastro.disciplina dis on dis.dis_codigo = edi.dis_codigo
                inner join catastro.edificacionesdeportivas ede on ede.ede_codigo = edi.ede_codigo 
                inner join academia.participante par on ins.participante_id = par.id
                inner join grpersona per on per.percodigo = par.percodigo
                WHERE par.id = $idParticipante";

        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        $talento = $stmt->fetchAll();

        return $talento;

    }

    public function guardarTalento($idParticipante, $link, $imgficha, $comentarios){

        $query = "UPDATE academia.participante  SET link= '$link',ficha='$imgficha',comentarios='$comentarios' WHERE id=$idParticipante";
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();

    }


}

